plugins {
    id 'brazil-gradle'
    id 'brazil-quality-defaults'
    id 'java'
    id 'kotlintrails'
    id 'kotlin'
    id 'com.github.johnrengelman.shadow'
}

def resource_name_with_dashes = 'aws-cleanrooms-collaboration'
def schema_file = "${resource_name_with_dashes}.json"


description 'CloudFormation Resource Provider - <AWS::CleanRooms::Collaboration>'

def rpdkGenDir = 'target/generated-sources/rpdk'
def delombokDir = 'target/generated-sources/delombok'

// Include RPDK generated source by `cfn generate`
// this is done explicitly to make sure that sources use delomboked version of source code.
sourceSets.main.java.srcDirs += [delombokDir]

sourceSets.main.resources {
    srcDir 'target/schema'
    include schema_file
}

// Include schema into jar
processResources {
    dependsOn 'copySchema'

    from('target/schema') {
        include schema_file
    }
}

task copySchema(type: Copy) {
    description = 'Copy source schema to target directory'

    from(projectDir) {
        include schema_file
    }
    into "target/schema"
}

dependencies {
    implementation brazilGradle.build()
    testImplementation brazilGradle.testbuild()
    brazilGradle.testrun().forEach { testRuntimeOnly(it) }
}

test {
    useJUnitPlatform()
}

def cfn_command = "${brazilGradle.path('[AWSCloudFormationRPDKJavaPluginTool]run.runtimefarm')}/bin/cfn"

// Generate RPDK wrapper source before compile
task rpdkGenerateSource(type: Exec) {
    description = 'Generate model sources from schema'
    compileJava.dependsOn it

    // Make proper up-to-date-ness for this Exec task
    inputs.file schema_file
    outputs.dirs 'target/generated-sources', 'target/generated-test-sources'

    executable = cfn_command
    args 'generate'
}

// Delombok the classes
task delombok {
    description 'Delomboks the source code'
    dependsOn rpdkGenerateSource
    doLast {
        ant.taskdef(classname: 'lombok.delombok.ant.Tasks$Delombok', classpath: brazilGradle.path('tool.classpath'),  name: 'delombok')
        ant.mkdir(dir: delombokDir)
        ant.delombok(verbose: 'false', encoding: 'UTF-8', to: delombokDir, from: rpdkGenDir, classpath: brazilGradle.path('tool.classpath') + brazilGradle.path('build.classpath'))
    }
}

compileJava.dependsOn(delombok)

compileKotlin {
    kotlinOptions.jvmTarget = 1.8
    dependsOn(delombok)
    dependsOn(copySchema)
}

compileTestKotlin{
    kotlinOptions.jvmTarget = 1.8
    dependsOn(delombok)
    dependsOn(copySchema)
}

// Run the tests by default
task release {
    description = 'Build the project and copy the RPDK package to brazil'
    dependsOn(check, assemble)
}

// // shadowJar overtakes the jar output location
jar.enabled = false

// Build a shadow jar for resource provider
shadowJar {
    // cfn requires the artifact under target and suffixed with SNAPSHOT.jar
    archiveClassifier = null
    archiveBaseName = "${resource_name_with_dashes}"
    destinationDirectory = file('target')
}

// Use `cfn` to build a RPDK package include resource provider shadow jar, schema etc.
task cfnPackage(type: Exec) {
    description = 'Create RPDK package with all resources'

    // Make proper up-to-date-ness for this Exec task
    inputs.files shadowJar.outputs
    outputs.file "${resource_name_with_dashes}.zip"
    executable = cfn_command
    args 'submit', '--dry-run'
}

// Inject internal files into package for further canary and FAS configuration
task rpdkPackage(type: Zip) {
    description = 'Package all internal files with provider archive for deployment'
    dependsOn cfnPackage
    assemble.dependsOn it

    // Inject internal files
    from ("${rootDir}/${resource_name_with_dashes}") {
        include "settings.internal.json"
    }
    from ("${rootDir}/${resource_name_with_dashes}") {
        include "canary-bundle/**/*"
    }
    from ("${rootDir}/${resource_name_with_dashes}") {
        include "contract-tests-artifacts/*"
    }
    destinationDirectory = file('build/rpdk')
    archiveFileName = "${resource_name_with_dashes}.zip"

    from zipTree(cfnPackage.outputs.files.singleFile)
}

// Publish the resource provider artifact as project output
// See: https://docs.gradle.org/6.8.3/userguide/cross_project_publications.html#sec:simple-sharing-artifacts-between-projects
configurations {
    cfnPackageArchive
}

artifacts {
    cfnPackageArchive rpdkPackage
}

// Delete target folder for clean
clean {
    delete 'target'
    delete cfnPackage.outputs.files
}
